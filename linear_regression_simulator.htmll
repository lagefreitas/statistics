<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simulador de Regress√£o Linear</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: white;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            color: #333;
        }
        
        h1 {
            text-align: center;
            color: #2c3e50;
            margin-bottom: 10px;
            font-size: 2.5em;
        }
        
        .subtitle {
            text-align: center;
            color: #7f8c8d;
            margin-bottom: 30px;
            font-size: 1.2em;
        }
        
        .main-content {
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 30px;
            margin-bottom: 20px;
        }
        
        .chart-container {
            background: white;
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
            border: 2px solid #ecf0f1;
        }
        
        .info-panel {
            background: linear-gradient(135deg, #74b9ff, #0984e3);
            border-radius: 15px;
            padding: 25px;
            color: white;
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
        }
        
        #chart {
            width: 100%;
            height: 400px;
            border: 2px solid #bdc3c7;
            border-radius: 10px;
            cursor: crosshair;
            background: #fafafa;
        }
        
        .equation {
            font-size: 1.8em;
            font-weight: bold;
            text-align: center;
            margin: 20px 0;
            padding: 15px;
            background: rgba(255,255,255,0.2);
            border-radius: 10px;
            font-family: 'Courier New', monospace;
        }
        
        .stats {
            background: rgba(255,255,255,0.1);
            border-radius: 10px;
            padding: 15px;
            margin: 15px 0;
        }
        
        .stat-item {
            display: flex;
            justify-content: space-between;
            margin: 10px 0;
            font-size: 1.1em;
        }
        
        .controls {
            text-align: center;
            margin: 20px 0;
        }
        
        button {
            background: linear-gradient(135deg, #e74c3c, #c0392b);
            color: white;
            border: none;
            padding: 12px 25px;
            font-size: 1.1em;
            border-radius: 25px;
            cursor: pointer;
            margin: 0 10px;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }
        
        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(0,0,0,0.3);
        }
        
        .instructions {
            background: #f8f9fa;
            border-left: 5px solid #3498db;
            padding: 20px;
            margin: 20px 0;
            border-radius: 0 10px 10px 0;
            color: #2c3e50;
        }
        
        .instructions h3 {
            margin-top: 0;
            color: #3498db;
        }
        
        .concept-box {
            background: linear-gradient(135deg, #00b894, #00a085);
            color: white;
            padding: 20px;
            border-radius: 15px;
            margin: 20px 0;
            text-align: center;
        }
        
        .concept-box h3 {
            margin-top: 0;
        }
        
        @media (max-width: 768px) {
            .main-content {
                grid-template-columns: 1fr;
            }
            
            .container {
                padding: 15px;
            }
            
            h1 {
                font-size: 2em;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>ü§ñ Simulador de Regress√£o Linear - Prof. Andr√© Lage Freitas</h1>
        <p class="subtitle">Como os dados de treinamento moldam a fun√ß√£o de Machine Learning</p>
        
        <div class="main-content">
            <div class="chart-container">
                <h3 style="text-align: center; color: #2c3e50; margin-bottom: 15px;">
                    üìä Gr√°fico Interativo - Clique para adicionar pontos!
                </h3>
                <canvas id="chart"></canvas>
            </div>
            
            <div class="info-panel">
                <h3>üìà Fun√ß√£o Aprendida</h3>
                <div class="equation" id="equation">
                    y = ? √ó x + ?
                </div>
                
                <div class="stats">
                    <h4>üìä Estat√≠sticas:</h4>
                    <div class="stat-item">
                        <span>Pontos de Treinamento:</span>
                        <span id="pointCount">0</span>
                    </div>
                    <div class="stat-item">
                        <span>Coeficiente Angular (a):</span>
                        <span id="slope">-</span>
                    </div>
                    <div class="stat-item">
                        <span>Intercepto (b):</span>
                        <span id="intercept">-</span>
                    </div>
                    <div class="stat-item">
                        <span>R¬≤ (Qualidade do Ajuste):</span>
                        <span id="rsquared">-</span>
                    </div>
                </div>
                
                <div class="controls">
                    <button onclick="clearPoints()">üóëÔ∏è Limpar Tudo</button>
                    <button onclick="addRandomPoints()">üé≤ Dados Aleat√≥rios</button>
                </div>
            </div>
        </div>
        
        <div class="instructions">
            <h3>üìö Como usar o simulador:</h3>
            <p><strong>1.</strong> Clique no gr√°fico para adicionar pontos de dados</p>
            <p><strong>2.</strong> Observe como a linha de regress√£o se ajusta automaticamente</p>
            <p><strong>3.</strong> Veja os coeficientes da fun√ß√£o mudando em tempo real</p>
            <p><strong>4.</strong> Experimente diferentes padr√µes de dados!</p>
        </div>
        
        <div class="concept-box">
            <h3>üí° Conceito Fundamental</h3>
            <p>
                <strong>Machine Learning n√£o √© uma base de dados!</strong><br>
                √â um algoritmo que <em>aprende</em> uma fun√ß√£o matem√°tica a partir dos dados de treinamento.
                Cada novo dado influencia os par√¢metros da fun√ß√£o, permitindo fazer previs√µes para novos valores.
            </p>
        </div>
    </div>

    <script>
        const canvas = document.getElementById('chart');
        const ctx = canvas.getContext('2d');
        
        // Configura√ß√µes do canvas
        canvas.width = canvas.offsetWidth;
        canvas.height = canvas.offsetHeight;
        
        const width = canvas.width;
        const height = canvas.height;
        const margin = 40;
        
        let points = [];
        let regressionLine = null;
        
        // Fun√ß√£o para converter coordenadas do canvas para coordenadas do gr√°fico
        function canvasToGraph(canvasX, canvasY) {
            const x = ((canvasX - margin) / (width - 2 * margin)) * 20 - 10;
            const y = 10 - ((canvasY - margin) / (height - 2 * margin)) * 20;
            return { x: x, y: y };
        }
        
        // Fun√ß√£o para converter coordenadas do gr√°fico para coordenadas do canvas
        function graphToCanvas(x, y) {
            const canvasX = ((x + 10) / 20) * (width - 2 * margin) + margin;
            const canvasY = (1 - (y + 10) / 20) * (height - 2 * margin) + margin;
            return { x: canvasX, y: canvasY };
        }
        
        // Fun√ß√£o para calcular regress√£o linear
        function calculateRegression(points) {
            if (points.length < 2) return null;
            
            const n = points.length;
            let sumX = 0, sumY = 0, sumXY = 0, sumXX = 0;
            
            points.forEach(point => {
                sumX += point.x;
                sumY += point.y;
                sumXY += point.x * point.y;
                sumXX += point.x * point.x;
            });
            
            const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);
            const intercept = (sumY - slope * sumX) / n;
            
            // Calcular R¬≤
            const meanY = sumY / n;
            let ssRes = 0, ssTot = 0;
            
            points.forEach(point => {
                const predicted = slope * point.x + intercept;
                ssRes += Math.pow(point.y - predicted, 2);
                ssTot += Math.pow(point.y - meanY, 2);
            });
            
            const rSquared = ssTot === 0 ? 1 : 1 - (ssRes / ssTot);
            
            return { slope, intercept, rSquared };
        }
        
        // Fun√ß√£o para desenhar o gr√°fico
        function drawChart() {
            // Limpar canvas
            ctx.clearRect(0, 0, width, height);
            
            // Desenhar grade
            ctx.strokeStyle = '#e0e0e0';
            ctx.lineWidth = 1;
            
            // Linhas verticais
            for (let i = 0; i <= 10; i++) {
                const x = margin + (i / 10) * (width - 2 * margin);
                ctx.beginPath();
                ctx.moveTo(x, margin);
                ctx.lineTo(x, height - margin);
                ctx.stroke();
            }
            
            // Linhas horizontais
            for (let i = 0; i <= 10; i++) {
                const y = margin + (i / 10) * (height - 2 * margin);
                ctx.beginPath();
                ctx.moveTo(margin, y);
                ctx.lineTo(width - margin, y);
                ctx.stroke();
            }
            
            // Desenhar eixos
            ctx.strokeStyle = '#333';
            ctx.lineWidth = 2;
            
            // Eixo X
            const centerY = graphToCanvas(0, 0).y;
            ctx.beginPath();
            ctx.moveTo(margin, centerY);
            ctx.lineTo(width - margin, centerY);
            ctx.stroke();
            
            // Eixo Y
            const centerX = graphToCanvas(0, 0).x;
            ctx.beginPath();
            ctx.moveTo(centerX, margin);
            ctx.lineTo(centerX, height - margin);
            ctx.stroke();
            
            // Desenhar linha de regress√£o
            if (regressionLine && points.length >= 2) {
                ctx.strokeStyle = '#e74c3c';
                ctx.lineWidth = 3;
                ctx.beginPath();
                
                const startPoint = graphToCanvas(-10, regressionLine.slope * (-10) + regressionLine.intercept);
                const endPoint = graphToCanvas(10, regressionLine.slope * 10 + regressionLine.intercept);
                
                ctx.moveTo(startPoint.x, startPoint.y);
                ctx.lineTo(endPoint.x, endPoint.y);
                ctx.stroke();
            }
            
            // Desenhar pontos
            points.forEach((point, index) => {
                const canvasPoint = graphToCanvas(point.x, point.y);
                
                // C√≠rculo do ponto
                ctx.fillStyle = '#3498db';
                ctx.beginPath();
                ctx.arc(canvasPoint.x, canvasPoint.y, 8, 0, 2 * Math.PI);
                ctx.fill();
                
                // Borda do ponto
                ctx.strokeStyle = '#2980b9';
                ctx.lineWidth = 2;
                ctx.stroke();
                
                // Anima√ß√£o para novos pontos
                if (index === points.length - 1) {
                    ctx.fillStyle = 'rgba(52, 152, 219, 0.3)';
                    ctx.beginPath();
                    ctx.arc(canvasPoint.x, canvasPoint.y, 15, 0, 2 * Math.PI);
                    ctx.fill();
                }
            });
            
            // Atualizar interface
            updateInterface();
        }
        
        // Fun√ß√£o para atualizar a interface
        function updateInterface() {
            const pointCountEl = document.getElementById('pointCount');
            const slopeEl = document.getElementById('slope');
            const interceptEl = document.getElementById('intercept');
            const rsquaredEl = document.getElementById('rsquared');
            const equationEl = document.getElementById('equation');
            
            pointCountEl.textContent = points.length;
            
            if (regressionLine && points.length >= 2) {
                const slope = regressionLine.slope.toFixed(3);
                const intercept = regressionLine.intercept.toFixed(3);
                const rSquared = regressionLine.rSquared.toFixed(3);
                
                slopeEl.textContent = slope;
                interceptEl.textContent = intercept;
                rsquaredEl.textContent = rSquared;
                
                const sign = regressionLine.intercept >= 0 ? '+' : '';
                equationEl.textContent = `y = ${slope}x ${sign} ${intercept}`;
            } else {
                slopeEl.textContent = '-';
                interceptEl.textContent = '-';
                rsquaredEl.textContent = '-';
                equationEl.textContent = 'y = ? √ó x + ?';
            }
        }
        
        // Event listener para cliques no canvas
        canvas.addEventListener('click', function(e) {
            const rect = canvas.getBoundingClientRect();
            const canvasX = e.clientX - rect.left;
            const canvasY = e.clientY - rect.top;
            
            const graphPoint = canvasToGraph(canvasX, canvasY);
            
            // Verificar se o ponto est√° dentro dos limites
            if (graphPoint.x >= -10 && graphPoint.x <= 10 && 
                graphPoint.y >= -10 && graphPoint.y <= 10) {
                
                points.push(graphPoint);
                
                // Recalcular regress√£o
                regressionLine = calculateRegression(points);
                
                // Redesenhar
                drawChart();
                
                // Anima√ß√£o suave
                setTimeout(() => drawChart(), 100);
            }
        });
        
        // Fun√ß√£o para limpar pontos
        function clearPoints() {
            points = [];
            regressionLine = null;
            drawChart();
        }
        
        // Fun√ß√£o para adicionar pontos aleat√≥rios
        function addRandomPoints() {
            clearPoints();
            
            // Gerar dados com uma tend√™ncia linear + ru√≠do
            const trueSlope = (Math.random() - 0.5) * 2;
            const trueIntercept = (Math.random() - 0.5) * 4;
            
            for (let i = 0; i < 8; i++) {
                const x = (Math.random() - 0.5) * 16;
                const y = trueSlope * x + trueIntercept + (Math.random() - 0.5) * 3;
                
                if (y >= -10 && y <= 10) {
                    points.push({ x, y });
                }
            }
            
            regressionLine = calculateRegression(points);
            drawChart();
        }
        
        // Redimensionar canvas quando a janela muda de tamanho
        window.addEventListener('resize', function() {
            canvas.width = canvas.offsetWidth;
            canvas.height = canvas.offsetHeight;
            drawChart();
        });
        
        // Desenhar gr√°fico inicial
        drawChart();
    </script>
</body>
</html>
